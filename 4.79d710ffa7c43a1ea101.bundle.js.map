{"version":3,"file":"4.79d710ffa7c43a1ea101.bundle.js","sources":["webpack:///./src/story-components/Galaxy/index.js"],"sourcesContent":["import * as THREE from 'three/src/Three'\nimport * as React from 'react';\nimport { useState, useRef, useMemo } from 'react'\nimport { Canvas, useRender } from 'react-three-fiber'\nimport { useSpring, animated } from 'react-spring/three'\n\nfunction Octahedron() {\n  const [active, setActive] = useState(false)\n  const [hovered, setHover] = useState(false)\n  const vertices = [[-1, 0, 0], [0, 1, 0], [1, 0, 0], [0, -1, 0], [-1, 0, 0]]\n  const { color, pos, ...props } = useSpring({\n    color: active ? 'hotpink' : 'white',\n    pos: active ? [0, 0, 2] : [0, 0, 0],\n    'material-opacity': hovered ? 0.6 : 0.25,\n    scale: active ? [1.5, 1.5, 1.5] : [1, 1, 1],\n    rotation: active ? [THREE.Math.degToRad(180), 0, THREE.Math.degToRad(45)] : [0, 0, 0],\n    config: { mass: 10, tension: 1000, friction: 300, precision: 0.00001 }\n  })\n  return (\n    <group>\n      <animated.line position={pos}>\n        <geometry attach=\"geometry\" vertices={vertices.map(v => new THREE.Vector3(...v))} />\n        <animated.lineBasicMaterial attach=\"material\" color={color} />\n      </animated.line>\n      <animated.mesh onClick={e => setActive(!active)} onPointerOver={e => setHover(true)} onPointerOut={e => setHover(false)} {...props}>\n        <octahedronGeometry attach=\"geometry\" />\n        <meshStandardMaterial attach=\"material\" color=\"grey\" transparent />\n      </animated.mesh>\n    </group>\n  )\n}\n\nfunction Stars() {\n  let group = useRef()\n  let theta = 0\n  useRender(() => {\n    // Some things maybe shouldn't be declarative, we're in the render-loop here with full access to the instance\n    const r = 5 * Math.sin(THREE.Math.degToRad((theta += 0.1)))\n    const s = Math.cos(THREE.Math.degToRad(theta * 2))\n    group.current.rotation.set(r, r, r)\n    group.current.scale.set(s, s, s)\n  })\n  const [geo, mat, vertices, coords] = useMemo(() => {\n    const geo = new THREE.SphereBufferGeometry(1, 10, 10)\n    const mat = new THREE.MeshBasicMaterial({ color: new THREE.Color('lightblue') })\n    const coords = new Array(2000).fill().map(i => [Math.random() * 800 - 400, Math.random() * 800 - 400, Math.random() * 800 - 400])\n    return [geo, mat, vertices, coords]\n  }, [])\n  return (\n    <group ref={group}>\n      {coords.map(([p1, p2, p3], i) => (\n        <mesh key={i} geometry={geo} material={mat} position={[p1, p2, p3]} />\n      ))}\n    </group>\n  )\n}\n\nconst Galaxy = () => (\n  <Canvas>\n    <ambientLight color=\"lightblue\" />\n    <pointLight color=\"white\" intensity={1} position={[10, 10, 10]} />\n    <Octahedron />\n    <Stars />\n  </Canvas>\n)\n\nexport default Galaxy;\n"],"mappings":"AAMA","sourceRoot":""}